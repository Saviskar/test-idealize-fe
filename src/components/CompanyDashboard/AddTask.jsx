import React, { useState } from "react";
import {
  Code,
  Share2,
  Target,
  FileText,
  Brain,
  MoreHorizontal,
} from "lucide-react";

const interns = [
  {
    id: 1,
    name: "Jane Doe",
    department: "Design",
    tasksCompleted: 3,
    tasksAssigned: 5,
  },
  {
    id: 2,
    name: "John Smith",
    department: "Development",
    tasksCompleted: 4,
    tasksAssigned: 6,
  },
];

const AddTask = () => {
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    deadline: "",
    category: "",
    skillsTags: [],
    assignedInterns: [],
  });

  const [newSkill, setNewSkill] = useState("");
  const [showSkillInput, setShowSkillInput] = useState(false);

  const categories = [
    { id: "development", name: "Development & Programming", icon: Code },
    { id: "marketing", name: "Marketing & Social Media", icon: Share2 },
    { id: "design", name: "Design & UI/UX", icon: Target },
    { id: "content", name: "Content Creation", icon: FileText },
    { id: "research", name: "Research & Analysis", icon: Brain },
    { id: "other", name: "Other", icon: MoreHorizontal },
  ];

  const availableSkills = [
    "JavaScript",
    "React",
    "Python",
    "Node.js",
    "HTML/CSS",
    "SQL",
    "MongoDB",
    "Social Media Marketing",
    "Content Writing",
    "SEO",
    "Graphic Design",
    "Data Analysis",
    "Project Management",
    "Communication",
    "Research",
    "Adobe Creative Suite",
    "WordPress",
    "Email Marketing",
    "Analytics",
    "Photography",
  ];

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const addSkill = (skill) => {
    if (skill && !formData.skillsTags.includes(skill)) {
      setFormData((prev) => ({
        ...prev,
        skillsTags: [...prev.skillsTags, skill],
      }));
    }
    setNewSkill("");
    setShowSkillInput(false);
  };

  const removeSkill = (skillToRemove) => {
    setFormData((prev) => ({
      ...prev,
      skillsTags: prev.skillsTags.filter((skill) => skill !== skillToRemove),
    }));
  };

  const toggleInternAssignment = (internId) => {
    setFormData((prev) => ({
      ...prev,
      assignedInterns: prev.assignedInterns.includes(internId)
        ? prev.assignedInterns.filter((id) => id !== internId)
        : [...prev.assignedInterns, internId],
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Validation
    if (!formData.title.trim()) {
      alert("Please enter a task title");
      return;
    }
    if (!formData.description.trim()) {
      alert("Please enter a task description");
      return;
    }
    if (!formData.deadline) {
      alert("Please select a deadline");
      return;
    }
    if (!formData.category) {
      alert("Please select a category");
      return;
    }
    if (formData.assignedInterns.length === 0) {
      alert("Please assign at least one intern");
      return;
    }

    // Create task object
    const newTask = {
      id: Date.now(), // In real app, this would be generated by backend
      title: formData.title,
      description: formData.description,
      deadline: formData.deadline,
      category: formData.category,
      skillsTags: formData.skillsTags,
      assignedInterns: formData.assignedInterns,
      status: "New",
      createdAt: new Date().toISOString(),
    };

    console.log("Task Created:", newTask);
    alert("Task created successfully!");

    // Reset form
    setFormData({
      title: "",
      description: "",
      deadline: "",
      category: "",
      skillsTags: [],
      assignedInterns: [],
    });

    // Optionally redirect to task list
    // setActiveSection("task-list");
  };

  const selectedCategory = categories.find(
    (cat) => cat.id === formData.category
  );

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-white mb-2">Create New Task</h2>
        <p className="text-gray-400">
          Fill out the details below to create a new task for your interns
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Task Title */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Task Title <span className="text-red-400">*</span>
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => handleInputChange("title", e.target.value)}
            className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
            placeholder="Enter a clear, descriptive task title"
            required
          />
        </div>

        {/* Task Description */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Task Description <span className="text-red-400">*</span>
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => handleInputChange("description", e.target.value)}
            rows="5"
            className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
            placeholder="Provide a detailed description of what needs to be accomplished, including any specific requirements, expected outcomes, and resources available"
            required
          />
        </div>

        {/* Deadline */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Deadline <span className="text-red-400">*</span>
          </label>
          <input
            type="datetime-local"
            value={formData.deadline}
            onChange={(e) => handleInputChange("deadline", e.target.value)}
            className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
            required
          />
          <p className="text-gray-400 text-sm mt-2">
            Select the date and time when this task should be completed
          </p>
        </div>

        {/* Category Selection */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Category <span className="text-red-400">*</span>
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {categories.map((category) => {
              const Icon = category.icon;
              return (
                <button
                  key={category.id}
                  type="button"
                  onClick={() => handleInputChange("category", category.id)}
                  className={`flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-all duration-200 ${
                    formData.category === category.id
                      ? "bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-white border border-blue-500/30"
                      : "text-gray-300 hover:bg-gray-700/50 hover:text-white border border-gray-600"
                  }`}
                >
                  <Icon size={18} />
                  <span className="text-sm font-medium">{category.name}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Skills Tags */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Required Skills
          </label>

          {/* Current Skills */}
          {formData.skillsTags.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-4">
              {formData.skillsTags.map((skill, index) => (
                <span
                  key={index}
                  className="bg-blue-500/20 text-blue-400 px-3 py-1 rounded-full text-sm flex items-center space-x-2"
                >
                  <span>{skill}</span>
                  <button
                    type="button"
                    onClick={() => removeSkill(skill)}
                    className="text-blue-400 hover:text-blue-300 transition-colors"
                  >
                    <svg
                      className="w-3 h-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </span>
              ))}
            </div>
          )}

          {/* Available Skills */}
          <div className="space-y-3">
            <p className="text-gray-400 text-sm">
              Select from available skills:
            </p>
            <div className="flex flex-wrap gap-2">
              {availableSkills
                .filter((skill) => !formData.skillsTags.includes(skill))
                .map((skill) => (
                  <button
                    key={skill}
                    type="button"
                    onClick={() => addSkill(skill)}
                    className="bg-gray-700/50 text-gray-300 px-3 py-1 rounded-full text-sm hover:bg-gray-600/50 hover:text-white transition-colors"
                  >
                    + {skill}
                  </button>
                ))}
            </div>

            {/* Custom Skill Input */}
            <div className="flex items-center space-x-2">
              {showSkillInput ? (
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={newSkill}
                    onChange={(e) => setNewSkill(e.target.value)}
                    className="bg-gray-700/50 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                    placeholder="Enter custom skill"
                    onKeyPress={(e) =>
                      e.key === "Enter" &&
                      (e.preventDefault(), addSkill(newSkill))
                    }
                  />
                  <button
                    type="button"
                    onClick={() => addSkill(newSkill)}
                    className="bg-blue-500/20 text-blue-400 px-3 py-2 rounded-lg hover:bg-blue-500/30 transition-colors"
                  >
                    Add
                  </button>
                  <button
                    type="button"
                    onClick={() => (setShowSkillInput(false), setNewSkill(""))}
                    className="text-gray-400 hover:text-gray-300 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              ) : (
                <button
                  type="button"
                  onClick={() => setShowSkillInput(true)}
                  className="text-blue-400 hover:text-blue-300 text-sm transition-colors"
                >
                  + Add Custom Skill
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Assign to Interns */}
        <div className="bg-gray-800/40 backdrop-blur-lg border border-gray-700/50 rounded-2xl p-6">
          <label className="block text-white font-semibold mb-3">
            Assign to Intern(s) <span className="text-red-400">*</span>
          </label>
          <p className="text-gray-400 text-sm mb-4">
            Select one or more interns to assign this task to
          </p>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {interns.map((intern) => (
              <button
                key={intern.id}
                type="button"
                onClick={() => toggleInternAssignment(intern.id)}
                className={`p-4 rounded-lg border transition-all duration-200 ${
                  formData.assignedInterns.includes(intern.id)
                    ? "bg-gradient-to-r from-blue-500/20 to-purple-500/20 border-blue-500/30 text-white"
                    : "bg-gray-700/50 border-gray-600 text-gray-300 hover:bg-gray-600/50"
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white font-bold text-sm">
                      {intern.name
                        .split(" ")
                        .map((n) => n[0])
                        .join("")}
                    </span>
                  </div>
                  <div className="text-left">
                    <p className="font-medium">{intern.name}</p>
                    <p className="text-sm opacity-75">{intern.department}</p>
                    <p className="text-xs opacity-60">
                      {intern.tasksCompleted}/{intern.tasksAssigned} tasks
                      completed
                    </p>
                  </div>
                </div>
                {formData.assignedInterns.includes(intern.id) && (
                  <div className="mt-2 flex items-center justify-center">
                    <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                      <svg
                        className="w-4 h-4 text-white"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M5 13l4 4L19 7"
                        />
                      </svg>
                    </div>
                  </div>
                )}
              </button>
            ))}
          </div>
        </div>

        {/* Submit Button */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => setActiveSection("task-list")}
            className="px-6 py-3 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 font-medium"
          >
            Create Task
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddTask;
